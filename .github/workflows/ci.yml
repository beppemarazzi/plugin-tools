name: Node CI
on: [push]

jobs:
  test:
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, 'ci skip') && !contains(github.event.head_commit.message, 'skip ci')"
    name: Run unit tests
    env:
      NX_CLOUD_ACCESS_TOKEN: ${{ secrets.NX_CLOUD_ACCESS_TOKEN }}
      NX_BRANCH: ${{ github.event.number || github.ref_name }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # We need to fetch all branches and commits so that Nx affected has a base to compare against.
          fetch-depth: 0
      - uses: nrwl/nx-set-shas@v4
      - name: Setup .npmrc file for NPM registry
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --no-audit
      - name: Check types
        run: npm exec nx affected -- --target typecheck --parallel
      - name: Lint
        run: npm exec nx affected -- --target lint --parallel
      - name: Unit tests
        run: npm exec nx affected -- --target test --run
      - name: Build all packages
        run: npm run build
      - name: Pack packages for testing
        run: |
          mkdir ./packed-artifacts
          npm pack --workspace="@grafana/create-plugin" --workspace="@grafana/sign-plugin" --pack-destination="./packed-artifacts"
      - name: Upload artifacts for testing
        uses: actions/upload-artifact@v4
        with:
          name: packed-artifacts
          path: ./packed-artifacts
          retention-days: 1

  generate-plugins:
    name: Test plugin scaffolding
    if: "!contains(github.event.head_commit.message, 'ci skip') && !contains(github.event.head_commit.message, 'skip ci')"
    needs: [test]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - workingDir: 'myorg-nobackend-app'
            cmdArgs: --pluginName='no-backend' --orgName='myorg' --pluginDescription='This is a sample app.' --pluginType='app' --no-hasBackend --hasGithubWorkflows --hasGithubLevitateWorkflow
            hasBackend: false
          - workingDir: 'myorg-nobackend-panel'
            cmdArgs: --pluginName='no-backend' --orgName='myorg' --pluginDescription='This is a sample panel.' --pluginType='panel' --hasGithubWorkflows --hasGithubLevitateWorkflow
            hasBackend: false
          - workingDir: 'myorg-nobackend-datasource'
            cmdArgs: --pluginName='no-backend' --orgName='myorg' --pluginDescription='This is a sample datasource.' --pluginType='datasource' --no-hasBackend --hasGithubWorkflows --hasGithubLevitateWorkflow
            hasBackend: false
          - workingDir: 'myorg-backend-datasource'
            cmdArgs: --pluginName='backend' --orgName='myorg' --pluginDescription='This is a sample backend datasource.' --pluginType='datasource' --hasBackend --hasGithubWorkflows --hasGithubLevitateWorkflow
            hasBackend: true
          - workingDir: 'myorg-nobackendscenes-app'
            cmdArgs: --pluginName='no-backend-scenes' --orgName='myorg' --pluginDescription='This is a sample scenes app.' --pluginType='scenesapp' --no-hasBackend --hasGithubWorkflows --hasGithubLevitateWorkflow
            hasBackend: false

    outputs:
      myorg-nobackend-app: ${{ steps.diff.outputs.myorg-nobackend-app }}
      myorg-backend-app: ${{ steps.diff.outputs.myorg-backend-app }}
      myorg-nobackend-panel: ${{ steps.diff.outputs.myorg-nobackend-panel }}
      myorg-nobackend-datasource: ${{ steps.diff.outputs.myorg-nobackend-datasource }}
      myorg-backend-datasource: ${{ steps.diff.outputs.myorg-backend-datasource }}
      myorg-nobackend-scenesapp: ${{ steps.diff.outputs.myorg-nobackend-scenesapp }}

    steps:
      - name: Setup .npmrc file for NPM registry
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'

      - name: Download packed artifacts
        uses: actions/download-artifact@v4
        with:
          name: packed-artifacts
          path: ./packed-artifacts

      - name: Install npm packages globally
        run: for file in *.tgz; do npm install -g "$file"; done
        working-directory: ./packed-artifacts

      - name: Generate plugin (with the latest version of @grafana/create-plugin)
        run: |
          npx @grafana/create-plugin@latest ${{ matrix.cmdArgs }}
          mv ${{ matrix.workingDir }} ${{ matrix.workingDir }}-latest

      - name: Generate plugin
        run: create-plugin ${{ matrix.cmdArgs }}

      - name: Compare output with the latest version
        id: diff
        run: |
          DIFF=$(diff -rq -x ".cprc.json" ${{ matrix.workingDir }} ${{ matrix.workingDir }}-latest)

          echo $DIFF

          echo "${{ matrix.workingDir }}=$DIFF" >> $GITHUB_OUTPUT

      - name: Install generated plugin dependencies
        run: npm install --no-audit
        working-directory: ./${{ matrix.workingDir }}

      - name: Lint plugin frontend
        run: npm run lint
        working-directory: ./${{ matrix.workingDir }}

      - name: Typecheck plugin frontend
        run: npm run typecheck
        working-directory: ./${{ matrix.workingDir }}

      - name: Build plugin frontend
        run: npm run build
        working-directory: ./${{ matrix.workingDir }}

      - name: Install playwright dependencies
        if: ${{ matrix.workingDir != 'myorg-nobackend-scenesapp' }}
        run: npm exec playwright install chromium
        working-directory: ./${{ matrix.workingDir }}

      - name: Start grafana server for e2e tests
        if: ${{ matrix.workingDir != 'myorg-nobackend-scenesapp' }}
        run: docker compose up -d
        working-directory: ./${{ matrix.workingDir }}

      - name: Wait for grafana server for e2e tests
        if: ${{ matrix.workingDir != 'myorg-nobackend-scenesapp' }}
        uses: nev7n/wait_for_response@v1
        with:
          url: 'http://localhost:3000/'
          responseCode: 200
          timeout: 60000
          interval: 500

      - name: Run e2e tests
        id: run-e2e-tests
        if: ${{ matrix.workingDir != 'myorg-nobackend-scenesapp' }}
        run: npm run e2e
        working-directory: ./${{ matrix.workingDir }}

      - name: Stop grafana docker
        if: ${{ matrix.workingDir != 'myorg-nobackend-scenesapp' }}
        run: docker-compose down
        working-directory: ./${{ matrix.workingDir }}

      - name: Archive E2E output
        uses: actions/upload-artifact@v4
        if: ${{ matrix.workingDir != 'myorg-nobackend-scenesapp' && steps.run-e2e-tests.outcome != 'success' }}
        with:
          name: ${{ matrix.workingDir }}-playwright-report
          path: ./${{ matrix.workingDir }}/playwright-report/
          retention-days: 5

      - name: '@grafana/sign-plugin - use GRAFANA_ACCESS_POLICY_TOKEN to sign generate-panel plugin'
        if: ${{ matrix.workingDir == 'myorg-nobackend-panel' && github.actor != 'dependabot[bot]' }}
        env:
          GRAFANA_ACCESS_POLICY_TOKEN: ${{ secrets.GRAFANA_ACCESS_POLICY_TOKEN }}
        run: sign-plugin --rootUrls http://www.example.com --signatureType private
        working-directory: ./${{ matrix.workingDir }}

      - name: '@grafana/sign-plugin - use GRAFANA_API_KEY to sign generate-panel plugin'
        if: ${{ matrix.workingDir == 'myorg-nobackend-panel' && github.actor != 'dependabot[bot]' }}
        env:
          GRAFANA_API_KEY: ${{ secrets.GRAFANA_API_KEY }}
        run: sign-plugin --rootUrls http://www.example.com --signatureType private
        working-directory: ./${{ matrix.workingDir }}

      - uses: actions/setup-go@v5
        with:
          go-version: '~1.21'
          check-latest: true
          cache-dependency-path: ./${{ matrix.workingDir }}/go.sum
        if: ${{ matrix.hasBackend == true }}

      - name: Build plugin backend
        uses: magefile/mage-action@v3
        with:
          version: latest
          args: -v build:linux
          workdir: ./${{ matrix.workingDir }}
        if: ${{ matrix.hasBackend == true }}

  generate-plugins-regression:
    name: Regression testing
    needs: [generate-plugins]
    runs-on: ubuntu-latest
    steps:
      - name: debug
        run: echo '${{ toJSON(needs.parallel.outputs) }}'

  release:
    runs-on: ubuntu-latest
    needs: [test, generate-plugins]
    if: "!contains(github.event.head_commit.message, 'ci skip') && !contains(github.event.head_commit.message, 'skip ci') && github.actor != 'dependabot[bot]'"
    name: Release packages
    env:
      NX_CLOUD_ACCESS_TOKEN: ${{ secrets.NX_CLOUD_ACCESS_TOKEN }}
      NX_BRANCH: ${{ github.event.number || github.ref_name }}
      NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
    steps:
      - name: Generate token
        id: generate_token
        uses: tibdex/github-app-token@3beb63f4bd073e61482598c45c71c1019b59b73a
        with:
          app_id: ${{ secrets.PLUGINS_PLATFORM_BOT_APP_ID }}
          private_key: ${{ secrets.PLUGINS_PLATFORM_BOT_APP_PEM }}

      - uses: actions/checkout@v4
        with:
          token: ${{ steps.generate_token.outputs.token }}

      - name: Prepare repository
        run: git fetch --unshallow --tags

      - name: Setup environment
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --no-audit

      - name: Build
        run: npm run build

      - name: Create Release
        env:
          GITHUB_TOKEN: ${{ steps.generate_token.outputs.token }}
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: npm run release
